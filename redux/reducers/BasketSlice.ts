import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { IProduct } from "@/interface/IProduct";
import { toast } from "react-toastify";

interface BasketState {
  basket: IProduct[];
  isLoading: boolean;
  error: string;
}

const initialState: BasketState = {
  basket: [],
  isLoading: false,
  error: "",
};

export const BasketSlice = createSlice({
  name: "basket",
  initialState,
  reducers: {
    AddProduct: (state, action: PayloadAction<IProduct>) => {
      if (state.basket.some((item) => item.name === action.payload.name)) {
        toast.error("‚ùå –ü—Ä–æ–¥—É–∫—Ç —É–∂–µ –µ—Å—Ç—å  –≤ –∫–æ—Ä–∑–∏–Ω–µ", {
          position: "top-right",
        });
      } else {
        state.basket.push(action.payload);
        toast.success("üçî –ü—Ä–æ–¥—É–∫—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É ", {
          position: "top-right",
        });
      }
    },
    DeleteProduct: (state, action: PayloadAction<number>) => {
      state.basket = state.basket.filter((item) => item.id !== action.payload);
      toast.success("üçî –ü—Ä–æ–¥—É–∫—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", {
        position: "top-right",
      });
    },
    Increment: (state, action: PayloadAction<number>) => {
      const product  = state.basket.find((item) => item.id === action.payload);
      if ( product )  {
        product.count++;
        product.price
      }
    },
    Decrement: (state, action: PayloadAction<number>) => {
      const product = state.basket.find((item) => item.id === action.payload);
      if (product && product.count > 0) {
        product.count--;
        
      }
    },
    ClearBasket: (state) => {
      if(state.basket.length <= 0){
        toast.error("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –∏ —Ç–∞–∫ –ø—É—Å—Ç–∞" , {
          position: "top-right"
        })
      }else{
        state.basket = []
        toast.success("üß∫ –ö–æ—Ä–∑–∏–Ω–∞ —Å—Ç–∞–ª–∞ –ø—É—Å—Ç–∞ ", {
          position: "top-right",
        });
      }
    }
  },
});

export default BasketSlice.reducer;
